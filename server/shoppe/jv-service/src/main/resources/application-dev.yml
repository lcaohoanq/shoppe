server:
  address: 0.0.0.0
  port: 8080
  error:
    include-message: always
    include-binding-errors: always
    include-stacktrace: never
    include-exception: false

api:
  prefix: /api/v1

spring:
  output:
    ansi:
      enabled: ALWAYS
  messages:
    basename: i18n/messages
    encoding: UTF-8
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
      location: uploads

  datasource:
    url: jdbc:postgresql://zimacube.tail21fc44.ts.net:5432/shoppe
    username: ${POSTGRES_USER:casaos}
    password: ${POSTGRES_PASSWORD:casaos}

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: validate
    show-sql: true


  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME:lvhhoangg1@gmail.com}
    password: ${MAIL_PASSWORD:wrongpassword}
  
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: shoppe-group
      auto-offset-reset: earliest
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

  data:
    redis:
      #spring.data.redis.use-redis-cache
      use-redis-cache: false
      host: localhost
      port: 6379

  graphql:
    graphiql:
      enabled: true
      path: /graphiql
    path: /graphql
    schema:
      printer:
        enabled: true
    cors:
      allowed-origins: "*"
      allowed-methods: GET,POST,PUT,DELETE,OPTIONS
      allowed-headers: "*"
      allow-credentials: false
      max-age: 3600

alert:
  manager:
    emails: ${ALERT_MANAGER_EMAILS:hoangclw@gmail.com,manhduonglhp4@gmail.com}

jwt:
  expiration: ${JWT_EXPIRATION:2592000}
  expiration-refresh-token: ${JWT_EXPIRATION_REFRESH_TOKEN:5184000}
  secretKey: ${JWT_SECRET_KEY:TaqlmGv1iEDMRiFp/pHuID1+T84IABfuA0xXh4GhiUI=}

logging:
  level:
    org.springframework: DEBUG
    springframework.security: DEBUG
    org.hibernate: DEBUG
  file:
    path: ${LOG_PATH:logs}
    name: ${LOG_PATH:logs}/application.log

springdoc:
  swagger-ui:
    operations-sorter: method
    tags-sorter: alpha

#health check
management:
  endpoints:
    web:
      base-path: /api/v1/actuator
      exposure:
        include: "health,info,prometheus"
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
    prometheus:
      enabled: true

vnpay:
  api:
    vnp_Version: ${VNPAY_VERSION:2.0.0}
    vnp_Command: ${VNPAY_COMMAND:pay}
    vnp_OrderType: ${VNPAY_ORDER_TYPE:billpayment}
    vnp_PayUrl: ${VNPAY_PAY_URL:https://sandbox.vnpayment.vn/paymentv2/vpcpay.html}
    vnp_Returnurl: ${VNPAY_RETURN_URL:http://localhost:4000/api/v1/payments/vnpay/payment_return}
    vnp_TmnCode: ${VNPAY_TMN_CODE:XM1B4C8V}
    vnp_HashSecret: ${VNPAY_HASH_SECRET:JC3DPNWE1FO1PE8441MVDMCB77N16S71}
    vnp_apiUrl: ${VNPAY_API_URL:https://sandbox.vnpayment.vn/merchant_webapi/api/transaction}